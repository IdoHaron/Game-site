Find_Min_heap(A)
    min<-length[A]/2+1
    for i<- min to length[A] do
        if A[i]<A[min] then
            min<-i
    
Find_10_In_Size(A)
    if length[A]<(2^10 -1) then
        Merge-Sort(A, 1, length[A])
        requested<-A[length[A]-10]
    else then
        Merge-Sort(A, 1, (2^10 -1))
        requested<-A[(2^10 -1)-10]
Find_k_In_Size(A, k)
    if length[A]< (2^10 -1) then
        heapSize[A] = length[A]
    else then
        heapSize[A] = 2^10 -1;
    for i<-0 to k do
        print HeapExtractMax(A)
Find_mid_right_way(A)
    k<- floor log(heapSize[A]+1)
    placement_mid <- roof (k/2)
    mid <- A[2^(mid+1) -1]
Re-Heap(A)
    for i<-floor log(length[A])-1 to 0 do
        if A[2^i] < A[2^(i+1) +1] then
            A[2^i]<->A[2^(i+1) +1]
            heapify(A, 2^(i+1) +1);

Partition(A, p, r)
    x<-A[r]
    i<-p-1
    All_E<-1
    for j<-p to r-1 do
        if A[j] != x then
            All_E <- 0
        if A[j]<= x then
            i<-i+1
            A[i]<->A[j]
    if All_E=1 then
        i <- floor length[A]/2 -1
    A[i+1]<->A[r]
    return i+1


    
