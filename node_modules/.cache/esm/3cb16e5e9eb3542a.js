_9eb‍.x([["game",()=>game]]);function game(user1, user2, game) {
    this.user1 = user1;
    this.user2 = user2;
    this.game = game;
    this.board = [2, 0, 0, 0, 0, -5, 0, -3, 0, 0, 0, 5, -5, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, -2];
    //setting new user propertys;
    this.user1.cubes = []; //cube array
    this.user2.cubes = [];
    this.user1.Player = 1;
    this.user2.Player = 2;
    //
    user1.game = game;
    user2.game = game;
    let cube_set = 0;

    //new users functions
    this.user1.set_cubes = (num1, num2) => {
        this.user1.cubes[cube_set] = [num1, num2];
    }
    this.user2.set_cubes = (num1, num2) => {
        this.user2.cubes[cube_set] = [num1, num2];
    }
    this.user1.get_other = () => {
        return this.user2;
    }
    this.user2.get_other = () => {
        return this.user1;
    }
    //
    this.RPS_Win = () => {
        if (this.user2.Select_RPS === this.user1.Select_RPS)
            return null;
        switch (this.user1.Select_RPS) {
            case "rock":
                if (this.user2.Select_RPS === "scissors")
                    return this.user1;
                else
                    return this.user2;
                break;
            case "paper":
                if (this.user2.Select_RPS === "rock")
                    return this.user1;
                else
                    return this.user2;
                break;
            case "scissors":
                if (this.user2.Select_RPS === "paper")
                    return this.user1;
                else
                    return this.user2;
                break;
        };
    }
    this.swtich_users = () => {
        let Saver = this.user1;
        this.user1 = this.user2;
        this.user1.get_other = () => {
            return Saver;
        }
        this.user2 = Saver;
        this.user2.get_other = () => {
            return this.user1;
        }
        this.get_playing_id = () => {
            return this[`user${this.user_turn}`].id;
        }
        this.get_playing = () => {
            return this[`user${this.user_turn}`];
        }
    }
    this.get_playing_id = () => {
        return this[`user${this.user_turn}`].id;
    }
    this.get_playing = () => {
        return this[`user${this.user_turn}`];
    }
    this.set_cubes = () => {
        let i = 0;
        let num_couple = 1;
        let num_saver = 0;
        while (num_couple == 1) {
            num_couple = Math.ceil(Math.random() * 3) + 2;
        }
        if (this.user2 === undefined)
            throw (new Error("user2 undefineds"));
        this.user1.numD = num_couple;
        this.user2.numD = num_couple;
        for (; i < num_couple; i++) {
            num_saver = 0;
            while (num_saver == 0) {
                num_saver = Math.ceil(Math.random() * 6);
            }
            this.user1.set_cubes(num_saver, num_saver);
            num_saver = 0;
            while (num_saver == 0) {
                num_saver = Math.ceil(Math.random() * 6);
            }
            this.user2.set_cubes(num_saver, num_saver);
            cube_set++;
        }
        let current_set = cube_set;
        this.role_cubes(1);
        cube_set = current_set;
        this.role_cubes(2);
    }
    this.role_cubes = (user_num) => {
        let num_cubes = 11 - this[`user${user_num}`].numD;
        this[`user${user_num}`];
        let num_saver1 = 0;
        let num_saver2 = 0;
        for (let i = 0; i < num_cubes; i++) {
            num_saver1 = 0;
            num_saver2 = 0;
            while (num_saver1 == 0) {
                num_saver1 = Math.ceil(Math.random() * 6);
            }
            while (num_saver2 == 0) {
                num_saver2 = Math.ceil(Math.random() * 6);
            }
            this[`user${user_num}`].set_cubes(num_saver1, num_saver2);
            cube_set++;
        }
    }
    this.Check_Win = () => { //needs fixing to other user, on the first square and no the last
        let soldier_counter_side1 = 0;
        let soldier_counter_side2 = 0;
        for (let i = -1; i <= 24; i++) {
            if (this.board[i] < 0)
                soldier_counter_side2++;
            else
                soldier_counter_side1++;
        }
        if (soldier_counter_side1 === 0)
            return user1;
        if (soldier_counter_side2 === 0)
            return user2;
        else
            return false;
    };
    this.New_Cubes = (user_num) => {
        console.log("user-num: " + user_num);
        this[`user${user_num}`].numD = 0;
        this.role_cubes(user_num);
    }
    this.user1.in_house = () => {
        for (let i = -1; i < 18; i++) {
            if (this.board[i] > 0)
                return false;
        }
        return true;
    }
    this.user2.in_house = () => {
        for (let i = 6; i <= 24; i++) {
            if (this.board[i] < 0)
                return false;
        }
        return true;
    }
}